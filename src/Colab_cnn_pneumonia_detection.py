# -*- coding: utf-8 -*-
"""CNN Pneumonia detection.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PqtkMW6re5Zx43N5oQtSLdyro81X9Mnu
"""

import pandas as pd
import numpy as np
import keras
import tensorflow as tf
from keras.callbacks import TensorBoard
from time import time

"""# Set train,test and validate generators"""

datagen = keras.preprocessing.image.ImageDataGenerator(rescale=1./255)

train = datagen.flow_from_directory('/content/drive/My Drive/chest-xray-resized/train/', target_size=(300, 375), color_mode='grayscale',batch_size=128)
test = datagen.flow_from_directory('/content/drive/My Drive/chest-xray-resized/test/', target_size=(300, 375), color_mode='grayscale',batch_size=128)
val = datagen.flow_from_directory('/content/drive/My Drive/chest-xray-resized/val/', target_size=(300, 375), color_mode='grayscale',batch_size=128)

validation = datagen.flow_from_directory('/content/drive/My Drive/chest-xray-resized/validation/', target_size=(300, 375), color_mode='grayscale', batch_size=450)

from google.colab import drive
drive.mount('/content/drive')

"""# Define CNN"""

from keras.models import Sequential
from keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Activation, Dropout
from keras.layers.advanced_activations import ReLU

model = Sequential()
model.add(Conv2D(filters=32, kernel_size=(3, 3), input_shape=(300, 375,1), activation='relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Dropout(0.2))
model.add(Conv2D(64, (3, 3), activation='relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Dropout(0.2))
model.add(Flatten())
model.add(Dense(128, activation='relu'))
model.add(Dropout(0.2))
model.add(Dense(units=2, activation='softmax'))
model.compile(
    loss='categorical_crossentropy',  # we train 2-way classification
    optimizer=keras.optimizers.Adadelta(),  # for SGD
    metrics=['accuracy'],  # report accuracy during training
    #shuffle=True,
    #verbose=1
)
#tensorboard = TensorBoard(log_dir="logs/{}".format(time()))
model.fit_generator(train,steps_per_epoch=len(train), epochs=10)#,callbacks=[tensorboard])#,
                   #validation_data = validation,validation_steps=len(validation))#, batch_size=32)

val_loss,val_acc = model.evaluate_generator(test,steps=len(val))
print(val_loss,val_acc)

predictions=model.predict_generator(test,steps=len(test))

import numpy as np

print(predictions[0],np.argmax(predictions[0]))
#print(test,np.argmax(test))

print(len(predictions))

predictions[0]

